$status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "templates</i> Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "templates` ADD COLUMN `DateFormat` TINYINT(3) NOT NULL DEFAULT '0' AFTER `CleanUp`");
				$status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "locationnetwork</i> Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "locationnetwork` ADD COLUMN `IsDownload` TINYINT(3) UNSIGNED NOT NULL DEFAULT '1' AFTER `NetworkType`");
				$status = doUpgrade($status, "Clearing Unused Setting Values...",
                                   "UPDATE `" . HC_TblPrefix . "settings` SET `SettingValue` = NULL WHERE `PkID` IN (5,6,48,50,54)");
				$status = doUpgrade($status, "Updating Setting 25...",
                                   "UPDATE `" . HC_TblPrefix . "settings` SET `SettingValue` = '30' WHERE `PkID` IN (25)");
				$status = doUpgrade($status, "Adding Setting 60...",
                                   "INSERT INTO `" . HC_TblPrefix . "settings` (`PkID`, `SettingValue`) VALUES ('60', NULL)");
				$status = doUpgrade($status, "Adding Setting 61...",
                                   "INSERT INTO `" . HC_TblPrefix . "settings` (`PkID`, `SettingValue`) VALUES ('61', NULL)");
				$status = doUpgrade($status, "Adding Setting 62...",
                                   "INSERT INTO `" . HC_TblPrefix . "settings` (`PkID`, `SettingValue`) VALUES ('62', NULL)");

				$status = doUpgrade($status, "Creating <i>" . HC_TblPrefix . "adminnotices</i> Table...",
                                   "CREATE TABLE `" . HC_TblPrefix . "adminnotices` (`PkID` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,`AdminID` INT(11) UNSIGNED NOT NULL DEFAULT '0',`TypeID` INT(11) UNSIGNED NOT NULL DEFAULT '0',`IsActive` INT(11) UNSIGNED NOT NULL DEFAULT '0',PRIMARY KEY (`PkID`))Engine=MyISAM CHARACTER SET utf8 COLLATE utf8_general_ci");
				$status = doUpgrade($status, "Creating <i>" . HC_TblPrefix . "settingsmeta</i> Table...",
                                   "CREATE TABLE `" . HC_TblPrefix . "settingsmeta` (`PkID` INT(11) NOT NULL AUTO_INCREMENT,`Keywords` TEXT NULL,`Description` TEXT NULL,`Title` TEXT NULL,PRIMARY KEY (`PkID`)) ENGINE=MyISAM CHARACTER SET utf8 COLLATE utf8_general_ci");
				for($i=1;$i<=17;$i++){
					$status = doUpgrade($status, "Adding Meta Setting " . $i . "...",
                                   "INSERT INTO `" . HC_TblPrefix . "settingsmeta` (`PkID`, `Keywords`,`Description`,`Title`) VALUES ('" . $i . "',NULL,NULL,NULL)");
				}