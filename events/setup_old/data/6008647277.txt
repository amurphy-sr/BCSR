$status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "admin</i> Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "admin` ADD COLUMN `Access` VARCHAR(32) NULL AFTER `PCKey`");
				$status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "events</i> Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "events` CHANGE COLUMN `LocationZip` `LocationZip` VARCHAR(50) NULL AFTER `LocationState`");
				$status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "locations</i> Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "locations` CHANGE COLUMN `Zip` `Zip` VARCHAR(50) NULL AFTER `Country`");
				$status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "registrants</i> Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "registrants` CHANGE COLUMN `Zip` `Zip` VARCHAR(50) NULL AFTER `State`");