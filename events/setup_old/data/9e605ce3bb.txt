$status = doUpgrade($status, "Creating <i>" . HC_TblPrefix . "templates</i> Table...",
                                   "CREATE TABLE `" . HC_TblPrefix . "templates` (`PkID` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,`Name` VARCHAR(255) NULL DEFAULT '',`Content` LONGTEXT NULL DEFAULT NULL,`Header` MEDIUMTEXT NULL DEFAULT NULL,`Footer` MEDIUMTEXT NULL DEFAULT NULL,`Extension` VARCHAR(15) NULL DEFAULT NULL,`TypeID` INT(11) UNSIGNED NULL DEFAULT '1',`GroupBy` SMALLINT(3) UNSIGNED NOT NULL DEFAULT '1',`SortBy` SMALLINT(3) UNSIGNED NOT NULL DEFAULT '1',`CleanUp` MEDIUMTEXT NULL DEFAULT NULL,`IsActive` SMALLINT(3) UNSIGNED NOT NULL DEFAULT '0',PRIMARY KEY (`PkID`))Engine=MyISAM CHARACTER SET utf8 COLLATE utf8_general_ci");
                    echo '<div style="padding-left:5px;line-height:15px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creating Default Templates...';
                    mysql_query("INSERT INTO `" . HC_TblPrefix . "templates` (`PkID`, `Name`, `Content`, `Header`, `Footer`, `Extension`, `TypeID`, `GroupBy`, `SortBy`, `CleanUp`, `IsActive`) VALUES ('1', 'InDesign - By Category', '|N\r\n$$[category_unique]|N\r\n$$[date_unique]|N\r\n[event_title]. [event_time_start]. [loc_name], [loc_address], [loc_city]. [desc_notags] [contact_url] [event_cost]', '', '', '.txt', '1', '1', '0', '\$\$BLANK|N\r\n BLANK,\r\n BLANK.\r\nBLANK', '1')");
                    mysql_query("INSERT INTO `" . HC_TblPrefix . "templates` (`PkID`, `Name`, `Content`, `Header`, `Footer`, `Extension`, `TypeID`, `GroupBy`, `SortBy`, `CleanUp`, `IsActive`) VALUES ('2', 'InDesign - By Date', '|N\r\n##[date_unique]|N\r\n##[category_unique]|N\r\n[event_title]. [event_time_start]. [loc_name], [loc_address], [loc_city]. [desc_notags] [contact_url] [event_cost]', '', '', '.txt', '1', '0', '1', '##BLANK|N\r\n BLANK,\r\n BLANK.\r\nBLANK', '1')");
                    mysql_query("INSERT INTO `" . HC_TblPrefix . "templates` (`PkID`, `Name`, `Content`, `Header`, `Footer`, `Extension`, `TypeID`, `GroupBy`, `SortBy`, `CleanUp`, `IsActive`) VALUES ('3', 'CSV - All Variables', '[event_id],[event_title],[desc_notags],[event_date],[event_time_start],[event_time_end],[event_cost],[event_billboard],[contact_name],[contact_email],[contact_phone],[space],[space_used],[space_left],[loc_name],[loc_address],[loc_address2],[loc_city],[loc_region],[loc_postal],[loc_country]\r\n', 'event_id,event_title,event_desc,event_date,event_time_start,event_time_end,event_cost,event_billboard,contact_name,contact_email,contact_phone,space,space_used,space_left,loc_name,loc_address,loc_address2,loc_city,loc_region,loc_postal,loc_country\r\n', '\r\n/eof', '.csv', '1', '1', '1', 'BLANK', '1')");
                    mysql_query("INSERT INTO `" . HC_TblPrefix . "templates` (`PkID`, `Name`, `Content`, `Header`, `Footer`, `Extension`, `TypeID`, `GroupBy`, `SortBy`, `CleanUp`, `IsActive`) VALUES ('4', 'Quark - Custom Layout', '\r\n@event head:[category_unique]\r\n@date head:[date_series]\r\n@calendar copy:[desc_notags]\r\n\r\n', '<Helios Output>', '', '.txt', '1', '3', '0', '@event head:BLANK\r\n@date head:BLANK\r\n@calendar copy:BLANK', '1')");
                    mysql_query("INSERT INTO `" . HC_TblPrefix . "templates` (`PkID`, `Name`, `Content`, `Header`, `Footer`, `Extension`, `TypeID`, `GroupBy`, `SortBy`, `CleanUp`, `IsActive`) VALUES ('5', 'Custom XML File', '   <event id=\'[event_id]\'>\r\n      <description title=\'[event_title]\'>[desc_notags]</description>\r\n      <date format=\'m/d/y\'>[event_date]</date>\r\n      <time>\r\n         <start hours=\'12\' format=\'H:M:S\'>[event_time_start]</start>\r\n         <end hours=\'12\' format=\'H:M:S\'>[event_time_end]</end>\r\n      </time>\r\n      <cost currency=\'$\'>[event_cost]</cost>\r\n      <contact>\r\n         <name>[contact_name]</name>\r\n         <email>[contact_email]</email>\r\n         <phone prefix=\'+1\'>[contact_phone]</phone>\r\n         <website url=\'[contact_url]\' />\r\n      </contact>\r\n      <location>\r\n         <name>[loc_name]</name>\r\n         <address>[loc_address]</address>\r\n         <address2>[loc_address2]</address2>\r\n         <city>[loc_city]</city>\r\n         <state>[loc_city]</state>\r\n         <zip>[loc_postal]</zip>\r\n         <country>[loc_country]</country>\r\n         <website url=\'[loc_url]\' />\r\n      </location>\r\n   </event>\r\n', '<?xml version=\'1.0\'?>\r\n<calendar>\r\n   <website url=\'[cal_url]\' />\r\n', '</calendar>', '.xml', '1', '1', '1', 'BLANK', '1')");
                    mysql_query("INSERT INTO `" . HC_TblPrefix . "templates` (`PkID`, `Name`, `Content`, `Header`, `Footer`, `Extension`, `TypeID`, `GroupBy`, `SortBy`, `CleanUp`, `IsActive`) VALUES ('7', 'CSV - Import Format', '[event_title],[event_description],[event_cost],[event_date],[event_time_start],[event_time_end],NULL,NULL,[loc_name],[loc_address],[loc_address2],[loc_city],[loc_region],[loc_postal],[loc_country],[contact_name],[contact_email],[contact_phone],[event_billboard],[event_seriesid],[space],[space_left]\r\n', 'EventTitle,Description,Cost,EventDate,StartTime,EndTime,AllDay,LocationID,LocatioName,LocationAddress,LocationAddress2,LocationCity,LocationState,LocationZip,LocationCountry,ContactName,ContactEmail,ContactPhone,ContactURL,Billboard,SeriesID,Registration,SpaceAvailable\r\n', '/eof', '.csv', '1', '1', '1', NULL, '1')");
                    echo '<b>Finished</b></div>';
                    $status = doUpgrade($status, "Adding Setting 57...",
                                   "INSERT INTO `" . HC_TblPrefix . "settings` (`PkID`, `SettingValue`) VALUES ('57', NULL)");
                    $status = doUpgrade($status, "Adding Setting 58...",
                                   "INSERT INTO `" . HC_TblPrefix . "settings` (`PkID`, `SettingValue`) VALUES ('58', NULL)");
                    $status = doUpgrade($status, "Adding Setting 59...",
                                   "INSERT INTO `" . HC_TblPrefix . "settings` (`PkID`, `SettingValue`) VALUES ('59', '#tweetment')");
                    $status = doUpgrade($status, "Altering <i>" . HC_TblPrefix . "</i>events Table...",
                                   "ALTER TABLE `" . HC_TblPrefix . "events`  ADD COLUMN `ShortURL` VARCHAR(50) NULL DEFAULT NULL AFTER `LocCountry`, ADD COLUMN `Tweetments` INT(11) UNSIGNED NOT NULL DEFAULT '0' AFTER `ShortURL`");